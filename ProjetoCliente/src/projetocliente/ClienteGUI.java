/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projetocliente;

import proj.comum.Utilizador;
import java.io.File;
import java.util.Iterator;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.*;
import proj.comum.Log;

/**
 *
 * @author rafae
 */
public class ClienteGUI extends javax.swing.JFrame {
    private ProjetoCliente clienteRMI;
    private Timer timerAtualizacao;
    
    

    /**
     * Creates new form ClienteInterface
     */
    public ClienteGUI() {
        try {
            clienteRMI = new ProjetoCliente();
            initComponents();
            configurarListeners();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao iniciar cliente: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }
    
    private void configurarListeners() {
        
        list_utilizadores.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && list_utilizadores.getSelectedValue() != null) {
                atualizarListaFicheirosUtilizador();
            }
        });
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        in_ficheiro = new javax.swing.JFileChooser();
        dlg_alerta = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        lb_ipServidor = new javax.swing.JLabel();
        txt_ipServidor = new javax.swing.JTextField();
        lb_portoServidor = new javax.swing.JLabel();
        txt_portoServidor = new javax.swing.JTextField();
        lb_nomeUtilizador = new javax.swing.JLabel();
        txt_nomeUtilizador = new javax.swing.JTextField();
        panel_utilizadores = new javax.swing.JPanel();
        lb_tituloUtilizadores = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_utilizadores = new javax.swing.JList<>();
        panel_logs = new javax.swing.JPanel();
        lb_tituloLogs = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        list_logs = new javax.swing.JList<>();
        panel_ficheiros = new javax.swing.JPanel();
        lb_tituloFicheiros = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        list_ficheiros = new javax.swing.JList<>();
        btn_descarregar = new javax.swing.JButton();
        btn_enviar = new javax.swing.JButton();
        lb_pastaLocal = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        list_pastaLocal = new javax.swing.JList<>();
        btn_entrar = new javax.swing.JButton();
        btn_sair = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout dlg_alertaLayout = new javax.swing.GroupLayout(dlg_alerta.getContentPane());
        dlg_alerta.getContentPane().setLayout(dlg_alertaLayout);
        dlg_alertaLayout.setHorizontalGroup(
            dlg_alertaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        dlg_alertaLayout.setVerticalGroup(
            dlg_alertaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        lb_ipServidor.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lb_ipServidor.setForeground(new java.awt.Color(0, 0, 0));
        lb_ipServidor.setText("IP do servidor:");

        txt_ipServidor.setBackground(new java.awt.Color(153, 153, 153));
        txt_ipServidor.setForeground(new java.awt.Color(51, 51, 51));
        txt_ipServidor.setText("localhost");

        lb_portoServidor.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lb_portoServidor.setForeground(new java.awt.Color(0, 0, 0));
        lb_portoServidor.setText("Porto:");

        txt_portoServidor.setBackground(new java.awt.Color(153, 153, 153));
        txt_portoServidor.setForeground(new java.awt.Color(51, 51, 51));
        txt_portoServidor.setText("1099");

        lb_nomeUtilizador.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lb_nomeUtilizador.setForeground(new java.awt.Color(0, 0, 0));
        lb_nomeUtilizador.setText("Nome do utilizador:");

        txt_nomeUtilizador.setBackground(new java.awt.Color(153, 153, 153));
        txt_nomeUtilizador.setForeground(new java.awt.Color(51, 51, 51));

        panel_utilizadores.setBackground(new java.awt.Color(153, 153, 153));

        lb_tituloUtilizadores.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lb_tituloUtilizadores.setForeground(new java.awt.Color(51, 51, 51));
        lb_tituloUtilizadores.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_tituloUtilizadores.setText("Utilizadores");

        list_utilizadores.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(list_utilizadores);

        javax.swing.GroupLayout panel_utilizadoresLayout = new javax.swing.GroupLayout(panel_utilizadores);
        panel_utilizadores.setLayout(panel_utilizadoresLayout);
        panel_utilizadoresLayout.setHorizontalGroup(
            panel_utilizadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lb_tituloUtilizadores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );
        panel_utilizadoresLayout.setVerticalGroup(
            panel_utilizadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_utilizadoresLayout.createSequentialGroup()
                .addComponent(lb_tituloUtilizadores, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        panel_logs.setBackground(new java.awt.Color(153, 153, 153));
        panel_logs.setForeground(new java.awt.Color(102, 102, 102));

        lb_tituloLogs.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lb_tituloLogs.setForeground(new java.awt.Color(51, 51, 51));
        lb_tituloLogs.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_tituloLogs.setText("Logs");

        list_logs.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(list_logs);

        javax.swing.GroupLayout panel_logsLayout = new javax.swing.GroupLayout(panel_logs);
        panel_logs.setLayout(panel_logsLayout);
        panel_logsLayout.setHorizontalGroup(
            panel_logsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lb_tituloLogs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane3)
        );
        panel_logsLayout.setVerticalGroup(
            panel_logsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_logsLayout.createSequentialGroup()
                .addComponent(lb_tituloLogs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panel_ficheiros.setBackground(new java.awt.Color(153, 153, 153));

        lb_tituloFicheiros.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lb_tituloFicheiros.setForeground(new java.awt.Color(51, 51, 51));
        lb_tituloFicheiros.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_tituloFicheiros.setText("Ficheiros");

        list_ficheiros.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(list_ficheiros);

        btn_descarregar.setText("Descarregar ficheiro");
        btn_descarregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_descarregarActionPerformed(evt);
            }
        });

        btn_enviar.setText("Selecionar pasta para partilha");
        btn_enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_enviarActionPerformed(evt);
            }
        });

        lb_pastaLocal.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lb_pastaLocal.setForeground(new java.awt.Color(51, 51, 51));
        lb_pastaLocal.setText("Pasta local");

        list_pastaLocal.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(list_pastaLocal);

        javax.swing.GroupLayout panel_ficheirosLayout = new javax.swing.GroupLayout(panel_ficheiros);
        panel_ficheiros.setLayout(panel_ficheirosLayout);
        panel_ficheirosLayout.setHorizontalGroup(
            panel_ficheirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lb_tituloFicheiros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane4)
            .addGroup(panel_ficheirosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_ficheirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_pastaLocal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panel_ficheirosLayout.createSequentialGroup()
                        .addGroup(panel_ficheirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_descarregar)
                            .addComponent(btn_enviar))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        panel_ficheirosLayout.setVerticalGroup(
            panel_ficheirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_ficheirosLayout.createSequentialGroup()
                .addComponent(lb_tituloFicheiros, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4)
                .addGap(18, 18, 18)
                .addComponent(btn_descarregar)
                .addGap(15, 15, 15)
                .addComponent(lb_pastaLocal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_enviar)
                .addContainerGap())
        );

        btn_entrar.setText("Entrar");
        btn_entrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_entrarActionPerformed(evt);
            }
        });

        btn_sair.setText("Sair");
        btn_sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panel_logs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_utilizadores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lb_ipServidor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_ipServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lb_portoServidor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_portoServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lb_nomeUtilizador)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_nomeUtilizador, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                        .addComponent(btn_entrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_sair))
                    .addComponent(panel_ficheiros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_ipServidor)
                    .addComponent(txt_ipServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_portoServidor)
                    .addComponent(txt_portoServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_nomeUtilizador)
                    .addComponent(txt_nomeUtilizador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_entrar)
                    .addComponent(btn_sair))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(panel_utilizadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(panel_logs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(panel_ficheiros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_enviarActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File pastaSelecionada = chooser.getSelectedFile();
            clienteRMI.setPastaPartilha(pastaSelecionada.getAbsolutePath());
            //lb_caminhoPasta.setText("Pasta: " + pastaSelecionada.getAbsolutePath());
            atualizarListaFicheirosLocais();
        }
    }//GEN-LAST:event_btn_enviarActionPerformed


    private void btn_descarregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_descarregarActionPerformed
        // TODO add your handling code here:
        String utilizadorSelecionado = list_utilizadores.getSelectedValue();
        String ficheiro = list_ficheiros.getSelectedValue();
        
        if (utilizadorSelecionado == null || ficheiro == null) {
            JOptionPane.showMessageDialog(this, "Selecione um utilizador e um ficheiro", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // desnecessaria uma vez que nao aparece na listagem de utilizadores
        if (clienteRMI.getUtilizadorAtual() != null && 
            clienteRMI.getUtilizadorAtual().getNome().equals(utilizadorSelecionado)) {
            JOptionPane.showMessageDialog(this, "Não pode transferir ficheiros de si próprio", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        File destino = new File(clienteRMI.getPastaPartilha(), ficheiro);
        if (destino.exists()) {
            int resposta = JOptionPane.showConfirmDialog(this, 
                    "O ficheiro já existe. Substituir?", 
                    "Confirmar", 
                    JOptionPane.YES_NO_OPTION);
            if (resposta != JOptionPane.YES_OPTION){
                return;
            }
        }
        setInterfaceAtiva(false);
        new Thread(() ->{
            try {
                if (clienteRMI.downloadFile(utilizadorSelecionado, ficheiro, destino)) {
                    clienteRMI.registarTransferencia(
                        utilizadorSelecionado, 
                        clienteRMI.getUtilizadorAtual().getNome(), 
                        ficheiro
                    );
                    SwingUtilities.invokeLater(() -> {
                        atualizarListaFicheirosLocais();
                        JOptionPane.showMessageDialog(this, "Transferência concluída com sucesso!");
                    });
                    
                } else {
                    SwingUtilities.invokeLater(() -> {
                        JOptionPane.showMessageDialog(this, "Erro na transferência", "Erro", JOptionPane.ERROR_MESSAGE);
                    });   
                }
            }finally{
                setInterfaceAtiva(true);
            }
        }).start();
        
 
    }//GEN-LAST:event_btn_descarregarActionPerformed
    
    // percaucao: nao deixa selecionar listas ate que a thread termine
    private void setInterfaceAtiva(boolean enabled) {
        btn_descarregar.setEnabled(enabled);
        btn_enviar.setEnabled(enabled);
        list_utilizadores.setEnabled(enabled);
        list_ficheiros.setEnabled(enabled);
    }
    
    private void btn_entrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_entrarActionPerformed
        String ip = txt_ipServidor.getText();
        int porto = Integer.parseInt(txt_portoServidor.getText());
        String nome = txt_nomeUtilizador.getText();

        switch(clienteRMI.conectar(ip, porto, nome)){
            case 1: 
                JOptionPane.showMessageDialog(this, "Login bem-sucedido!");
                resetInterfaceOnLogin();
                iniciarAtualizacaoAutomatica();
                break;
            case 0: 
                JOptionPane.showMessageDialog(this, "Nome de utilizador já existe!", "Erro", JOptionPane.ERROR_MESSAGE);
                break;
            default:
                JOptionPane.showMessageDialog(this, "Erro na ligação ao servidor", "Erro", JOptionPane.ERROR_MESSAGE);
                break;
        }
    }//GEN-LAST:event_btn_entrarActionPerformed
    
    private void resetInterfaceOnLogin() {
        // atualizar todos os componentes
        atualizarListaUtilizadores();
        atualizarLogs();
        atualizarListaFicheirosLocais();

        // resetar selecoes
        list_utilizadores.clearSelection();
        list_ficheiros.clearSelection();

        // atualizar estado dos botoes
        btn_entrar.setEnabled(false);
        btn_sair.setEnabled(true);
        txt_ipServidor.setEnabled(false);
        txt_portoServidor.setEnabled(false);
        txt_nomeUtilizador.setEnabled(false);
    }
    
    private void btn_sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sairActionPerformed
        // TODO add your handling code here:
        clienteRMI.desconectar();
        
        if (timerAtualizacao != null) {
            timerAtualizacao.cancel();
            timerAtualizacao = null;
        }
        
        resetInterfaceOnLogout();
    }//GEN-LAST:event_btn_sairActionPerformed
    
    private void resetInterfaceOnLogout() {
        // limpar listas
        list_utilizadores.setModel(new DefaultListModel<>());
        list_ficheiros.setModel(new DefaultListModel<>());
        list_logs.setModel(new DefaultListModel<>());
        list_pastaLocal.setModel(new DefaultListModel<>());
         
        txt_ipServidor.setEnabled(true);
        txt_portoServidor.setEnabled(true);
        txt_nomeUtilizador.setEnabled(true);
        btn_entrar.setEnabled(true);
        btn_sair.setEnabled(false);
    }
    

    //REF: https://www.baeldung.com/java-timer-and-timertask / https://www.tutorialspoint.com/java/util/timer_scheduleatfixedrate.htm
    private void iniciarAtualizacaoAutomatica() {
        // atuazizacao a cada 3s
        timerAtualizacao = new Timer("AtualizacaoInterface");
        timerAtualizacao.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                SwingUtilities.invokeLater(() -> {
                    atualizarListaUtilizadores();
                    atualizarListaFicheirosLocais();
                    atualizarLogs();
                });
            }
        }, 0, 3000);
    }
    
    private void atualizarListaUtilizadores() {
        Vector<Utilizador> utilizadores = clienteRMI.getUtilizadoresOnline();
        DefaultListModel<String> model = new DefaultListModel<>();
        if (utilizadores != null) {
            
            Iterator<Utilizador> i = utilizadores.iterator();
            
            while (i.hasNext()){
                Utilizador u = i.next();
                if (!u.getNome().equals(clienteRMI.getUtilizadorAtual().getNome())) {
                    model.addElement(u.getNome());   
                }
            }
        }
        list_utilizadores.setModel(model);
    }
    
    private void atualizarLogs() {
        Vector<String> logs = clienteRMI.getLogs();
        DefaultListModel<String> model = new DefaultListModel<>();
        
        
        if (logs != null) {
            Iterator<String> i = logs.iterator();       
            while (i.hasNext()){
                String l = i.next();
                model.addElement(l);
            }
        }
        list_logs.setModel(model);
        
        // scroll automatico para o final
        int ultimo = list_logs.getModel().getSize() - 1;
        if (ultimo >= 0) {
            list_logs.ensureIndexIsVisible(ultimo);
        }
    }
    
    private void atualizarListaFicheirosUtilizador() {
        String utilizadorSelecionado = list_utilizadores.getSelectedValue();
        if (utilizadorSelecionado != null) {
            Vector<String> ficheiros = clienteRMI.obterListaFicheiros(utilizadorSelecionado);
            DefaultListModel<String> model = new DefaultListModel<>();
            
            Iterator<String> i = ficheiros.iterator();
            
            while (i.hasNext()){
                String f = i.next();
                model.addElement(f);  
            }    
            list_ficheiros.setModel(model);
        }
    }
    
    private void atualizarListaFicheirosLocais() {
        String path = clienteRMI.getPastaPartilha();
        if (path != null) {
            File pasta = new File(path);
            String[] ficheiros = pasta.list();
            DefaultListModel<String> model = new DefaultListModel<>();
            
            
            
            if (ficheiros != null) {
                List<String> listaFicheiros = Arrays.asList(ficheiros);
                Iterator<String> i = listaFicheiros.iterator();
                while (i.hasNext()){
                    String f = i.next();
                    model.addElement(f);
                }
            }
            list_pastaLocal.setModel(model);
        }
    }
   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_descarregar;
    private javax.swing.JButton btn_entrar;
    private javax.swing.JButton btn_enviar;
    private javax.swing.JButton btn_sair;
    private javax.swing.JDialog dlg_alerta;
    private javax.swing.JFileChooser in_ficheiro;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lb_ipServidor;
    private javax.swing.JLabel lb_nomeUtilizador;
    private javax.swing.JLabel lb_pastaLocal;
    private javax.swing.JLabel lb_portoServidor;
    private javax.swing.JLabel lb_tituloFicheiros;
    private javax.swing.JLabel lb_tituloLogs;
    private javax.swing.JLabel lb_tituloUtilizadores;
    private javax.swing.JList<String> list_ficheiros;
    private javax.swing.JList<String> list_logs;
    private javax.swing.JList<String> list_pastaLocal;
    private javax.swing.JList<String> list_utilizadores;
    private javax.swing.JPanel panel_ficheiros;
    private javax.swing.JPanel panel_logs;
    private javax.swing.JPanel panel_utilizadores;
    private javax.swing.JTextField txt_ipServidor;
    private javax.swing.JTextField txt_nomeUtilizador;
    private javax.swing.JTextField txt_portoServidor;
    // End of variables declaration//GEN-END:variables
}
